import unittest
from TestUtils import TestLexer
class LexerSuite(unittest.TestCase):
    def test_lowercase_identifier(self):
        """test identifiers"""
        self.assertTrue(TestLexer.test("randotesto\t\f", "randotesto,<EOF>", 101))
        self.assertTrue(TestLexer.test("12312.ee3332szxd3!", "12312.,ee3332szxd3,!,<EOF>", 102))
        self.assertTrue(TestLexer.test(""" "He asked me: \\"Where is John?\\"" """, """He asked me: \\"Where is John?\\",<EOF>""", 103))
        self.assertTrue(TestLexer.test("9983e-3232", "9983e-3232,<EOF>", 104))
        self.assertTrue(TestLexer.test("{sdsadee}", "{,sdsadee,},<EOF>", 105))
        self.assertTrue(TestLexer.test("truefalse false,true}true", "truefalse,false,,,true,},true,<EOF>", 106))
        self.assertTrue(TestLexer.test("a121_232ss 1122_33.4343 _232", "a121_232ss,112233.4343,_232,<EOF>", 107))
        self.assertTrue(TestLexer.test("9abc", "9,abc,<EOF>", 108))
        self.assertTrue(TestLexer.test("\t\b\n\f", "<EOF>", 109))
        self.assertTrue(TestLexer.test("4aaaaxxx__33//randomcomment", "4,aaaaxxx__33,<EOF>", 110))
        self.assertTrue(TestLexer.test("ooppxxew/*randomcomment*/122311123", "ooppxxew,122311123,<EOF>", 111))
        self.assertTrue(TestLexer.test(""" "aasdasdxx""", "Unclosed String: aasdasdxx", 112))
        self.assertTrue(TestLexer.test(""" "aasdasdxx\\nsds" """, "aasdasdxx\\nsds,<EOF>", 113))
        self.assertTrue(TestLexer.test("ab?cd", "ab,Error Token ?", 114))
        self.assertTrue(TestLexer.test("a : integer = ?", "a,:,integer,=,Error Token ?", 115))
        self.assertTrue(TestLexer.test(""" "abc\\"" """, """abc\\",<EOF>""", 116))
        self.assertTrue(TestLexer.test(""" "abc\\n\\t\\f123231" """, """abc\\n\\t\\f123231,<EOF>""", 117))
        self.assertTrue(TestLexer.test(""" "abc\\"" """, """abc\\",<EOF>""", 118))
        self.assertTrue(TestLexer.test("{+}--**/", "{,+,},-,-,*,*,/,<EOF>", 119))
        self.assertTrue(TestLexer.test(""" "abc""yydmmmc""", """abc,Unclosed String: yydmmmc""", 120))
        self.assertTrue(TestLexer.test(""" "abc""123" """, """abc,123,<EOF>""", 121))
        self.assertTrue(TestLexer.test(""" "abc""123\\o" """, """abc,Illegal Escape In String: 123\o""", 122))
        self.assertTrue(TestLexer.test("123333'sssd", "123333,Error Token '", 123))
        self.assertTrue(TestLexer.test("aas //sadwwweaxx\nasdaseeexx", "aas,asdaseeexx,<EOF>", 124))
        self.assertTrue(TestLexer.test("aas //sadwwweaxx\tasdaseeexx", "aas,<EOF>", 125))
        self.assertTrue(TestLexer.test("""aase"abc"99ss31.122dee3""", """aase,abc,99,ss31,.,122,dee3,<EOF>""", 126))
        self.assertTrue(TestLexer.test("""1.222e33asdseex 9_232aax""", """1.222e33,asdseex,9232,aax,<EOF>""", 127))
        self.assertTrue(TestLexer.test(""" "abc\\t\\f\\n"::12232 """, """abc\\t\\f\\n,::,12232,<EOF>""", 128))
        self.assertTrue(TestLexer.test(""" "\\labc\\t\\f\\g" """, """Illegal Escape In String: \l""", 129))
        self.assertTrue(TestLexer.test(""" "\\rabc"\t\f\n """, """\\rabc,<EOF>""", 130))
        self.assertTrue(TestLexer.test(""" "\\rabc""\\t\\f\\n """, """\\rabc,Unclosed String: \\t\\f\\n """, 131))
        self.assertTrue(TestLexer.test(""" "abc\\""::"ee334\\n"::"_==[[xxs46"::" """, """abc\\",::,ee334\\n,::,_==[[xxs46,::,Unclosed String:  """, 132))
        self.assertTrue(TestLexer.test(""" "abc\\k""::"ee334\\n"::"_==[[xxs46"::"" """, """Illegal Escape In String: abc\k""", 133))
        self.assertTrue(TestLexer.test(""" "\\"\\"\\"\\"\\"\\"" """, """\\"\\"\\"\\"\\"\\",<EOF>""", 134))
        self.assertTrue(TestLexer.test("aaasd/**/9xxr.9e335/*hmmxettranx*/_99k1Axx;;;;;;\n", """aaasd,9,xxr,.,9e335,_99k1Axx,;,;,;,;,;,;,<EOF>""", 135))
        self.assertTrue(TestLexer.test("func : function integer (out n1 : integer, n2 : string, n3 : float) { a : float = 1.222e-34; return; }", "func,:,function,integer,(,out,n1,:,integer,,,n2,:,string,,,n3,:,float,),{,a,:,float,=,1.222e-34,;,return,;,},<EOF>", 136))
        self.assertTrue(TestLexer.test(""" str : array[2,2] of string = {{"abc\\"","\\t\\n"},{"933.ssxxz!!!!!","../czfd44"}} ; """, """str,:,array,[,2,,,2,],of,string,=,{,{,abc\\",,,\\t\\n,},,,{,933.ssxxz!!!!!,,,../czfd44,},},;,<EOF>""", 137))
        self.assertTrue(TestLexer.test(""" str1 : string = "abc\\" """, """str1,:,string,=,Unclosed String: abc\\" """, 138))
        self.assertTrue(TestLexer.test(""" str1 : string = "abc\\z" """, """str1,:,string,=,Illegal Escape In String: abc\z""", 139))
        self.assertTrue(TestLexer.test("""9aa22xxdd"abc\\""9.e22xrr3!""", """9,aa22xxdd,abc\\",9.e22,xrr3,!,<EOF>""", 140))
        self.assertTrue(TestLexer.test(""" "\\\\" """, """\\\\,<EOF>""", 141))
        self.assertTrue(TestLexer.test("5Uj6C1GP8LLDms28!7eQZ5PWl&&L||fVwNOwYJqr", """5,Uj6C1GP8LLDms28,!,7,eQZ5PWl,&&,L,||,fVwNOwYJqr,<EOF>""", 142))
        self.assertTrue(TestLexer.test("5=b[qyrKzy:+Jn.}", "5,=,b,[,qyrKzy,:,+,Jn,.,},<EOF>", 143))
        self.assertTrue(TestLexer.test("MC/dB////T6MqSV~^]^sNpK)SfTZ+}]4\n,,hgkv.!==xmmmf", "MC,/,dB,,,,,hgkv,.,!=,=,xmmmf,<EOF>", 144))
        self.assertTrue(TestLexer.test("w<4BzT9x9bG+-q2/S28s92qP7gGc?6", "w,<,4,BzT9x9bG,+,-,q2,/,S28s92qP7gGc,Error Token ?", 145))
        self.assertTrue(TestLexer.test("AD1212eXx,m.32=zxhbm!,67WmqJXgPdFB3u2h6Vd6Zg", "AD1212eXx,,,m,.,32,=,zxhbm,!,,,67,WmqJXgPdFB3u2h6Vd6Zg,<EOF>", 146))
        self.assertTrue(TestLexer.test("jKq05bo8+WWsXsPADawWZwJYxtDWYxUB*+9=FmA42Wh3!q", "jKq05bo8,+,WWsXsPADawWZwJYxtDWYxUB,*,+,9,=,FmA42Wh3,!,q,<EOF>", 147))
        self.assertTrue(TestLexer.test("""ECTCV=35=A"abc\\"\\r\\f\\b\\""6rBQK0abHm.3_32_455""", """ECTCV,=,35,=,A,abc\\"\\r\\f\\b\\",6,rBQK0abHm,.,332455,<EOF>""", 148))
        self.assertTrue(TestLexer.test(""" "abc\\""{}{{{{{};cm,ejj}}}"dggcx"}"hhfxdrc """, """abc\\",{,},{,{,{,{,{,},;,cm,,,ejj,},},},dggcx,},Unclosed String: hhfxdrc """, 149))
        self.assertTrue(TestLexer.test("q7HFk%YZ&&r&&h&&&&&", "q7HFk,%,YZ,&&,r,&&,h,&&,&&,Error Token &", 150))
        self.assertTrue(TestLexer.test("11_xxeeega!11122____3333.44__e-13223", "11,_xxeeega,!,111223333.44,__e,-,13223,<EOF>", 151))
        self.assertTrue(TestLexer.test("""9"!+:EQCt(N*(?>CKMY>Z^h3n"DH/k""", """9,!+:EQCt(N*(?>CKMY>Z^h3n,DH,/,k,<EOF>""", 152))
        self.assertTrue(TestLexer.test(""" "abc\\ " """, """Illegal Escape In String: abc\ """, 153))
        self.assertTrue(TestLexer.test(""" "abc\\\\" """, """abc\\\\,<EOF>""", 154))
        self.assertTrue(TestLexer.test(""" "abc\\\\\\"\\t\\b" """, """abc\\\\\\"\\t\\b,<EOF>""", 155))
        self.assertTrue(TestLexer.test(""" "abc\\\\\"\\t\\b" """, """abc\\\\,Error Token \\""", 156))
        self.assertTrue(TestLexer.test(""" "abc\\htxzxdw" """, """Illegal Escape In String: abc\\h""", 157))
        self.assertTrue(TestLexer.test("198.177.193.53", "198.177,.,193.53,<EOF>", 158))
        self.assertTrue(TestLexer.test("b6*o6aDY5A||dx||tt|y|", "b6,*,o6aDY5A,||,dx,||,tt,Error Token |", 159))
        self.assertTrue(TestLexer.test("Lorem ipsum dolor, sit amet, consectetur. Adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", "Lorem,ipsum,dolor,,,sit,amet,,,consectetur,.,Adipiscing,elit,,,sed,do,eiusmod,tempor,incididunt,ut,labore,et,dolore,magna,aliqua,.,<EOF>", 160))
        self.assertTrue(TestLexer.test(""" "abddxxx\tc\\"" """, """abddxxx	c\\",<EOF>""", 161))
        self.assertTrue(TestLexer.test(""" "7Jt493D!5#eqayo" """, """7Jt493D!5#eqayo,<EOF>""", 162))
        self.assertTrue(TestLexer.test("C#y39A7#..sWtHncoq", "C,Error Token #", 163))
        self.assertTrue(TestLexer.test("func1 : function auto (out a : integer, b : float) {a = ? ;}", "func1,:,function,auto,(,out,a,:,integer,,,b,:,float,),{,a,=,Error Token ?", 164))
        self.assertTrue(TestLexer.test("a = 1 < 4 >0 ; -3.zx {||dddz21,.55""", "a,=,1,<,4,>,0,;,-,3.,zx,{,||,dddz21,,,.,55,<EOF>", 165))
        self.assertTrue(TestLexer.test("?", "Error Token ?", 166))
        self.assertTrue(TestLexer.test(""" abcsssx" """, """abcsssx,Unclosed String:  """, 167))
        self.assertTrue(TestLexer.test(""" "8fDryG6kHc!5nCAK" """, """8fDryG6kHc!5nCAK,<EOF>""", 168))
        self.assertTrue(TestLexer.test("ZvLvVZFdk!fPsTCrjAmDMVUgGR0Sre6!/mrZe.*v", "ZvLvVZFdk,!,fPsTCrjAmDMVUgGR0Sre6,!,/,mrZe,.,*,v,<EOF>", 169))
        self.assertTrue(TestLexer.test("A53 LE13i9..xwLgYK  AuiBfR dx||vCKFCQ$IaohJB1!a", "A53,LE13i9,.,.,xwLgYK,AuiBfR,dx,||,vCKFCQ,Error Token $", 170))
        self.assertTrue(TestLexer.test("ewcvNC<><><><>aGDg||zGTVwJ<i!.tLL2mg55g&&ny8g>xEQMF~L", "ewcvNC,<,>,<,>,<,>,<,>,aGDg,||,zGTVwJ,<,i,!,.,tLL2mg55g,&&,ny8g,>,xEQMF,Error Token ~", 171))
        self.assertTrue(TestLexer.test(""" """""""""""""""""" """, """<EOF>""", 172))
        self.assertTrue(TestLexer.test("nbqu6z4q.WuoAT0Pfrban#KYPfrCoxfyPVtj6MvD", "nbqu6z4q,.,WuoAT0Pfrban,Error Token #", 173))
        self.assertTrue(TestLexer.test("""int1, int2, int3 : float = 1.22e332, 1_332_443_.e-1223, 0.3322e0 ;""", """int1,,,int2,,,int3,:,float,=,1.22e332,,,1332443,_,.,e,-,1223,,,0.3322e0,;,<EOF>""", 174))
        self.assertTrue(TestLexer.test("c,f8BjQgQq8qPAz]Yky!", "c,,,f8BjQgQq8qPAz,],Yky,!,<EOF>", 175))
        self.assertTrue(TestLexer.test("ki_-rJ-Ww,M,||A!=7,:eD+G2;}y$nzV", "ki_,-,rJ,-,Ww,,,M,,,||,A,!=,7,,,:,eD,+,G2,;,},y,Error Token $", 176))
        self.assertTrue(TestLexer.test(",62*)/%)%(*]0*,o%5,:[797})+4:*", ",,62,*,),/,%,),%,(,*,],0,*,,,o,%,5,,,:,[,797,},),+,4,:,*,<EOF>", 177))
        self.assertTrue(TestLexer.test("a2%!!!313b3b32!b222!a%2211%ba!", "a2,%,!,!,!,313,b3b32,!,b222,!,a,%,2211,%,ba,!,<EOF>", 178))
        self.assertTrue(TestLexer.test("22c313bcbbb12331322%b2b!c2c3!%", "22,c313bcbbb12331322,%,b2b,!,c2c3,!,%,<EOF>", 179))
        self.assertTrue(TestLexer.test("int1 : integer = 3323; func1:function boolean (a:boolean) {i[22,3] = 7 / 6 ;}", "int1,:,integer,=,3323,;,func1,:,function,boolean,(,a,:,boolean,),{,i,[,22,,,3,],=,7,/,6,;,},<EOF>", 180))
        self.assertTrue(TestLexer.test("""int1 : integer = 3?323; func1:function boolean (a:boolean) {i[22,3] = 7 / 6 ;}""", """int1,:,integer,=,3,Error Token ?""", 181))
        self.assertTrue(TestLexer.test("""int1 : integer = "sadsadxx\\u"; func1:function boolean (a:boolean) {i[22,3] = 7 / 6 ;}""", """int1,:,integer,=,Illegal Escape In String: sadsadxx\\u""", 182))
        self.assertTrue(TestLexer.test("""rand : string = """";""", """rand,:,string,=,;,<EOF>""", 183))
        self.assertTrue(TestLexer.test("qjo/LUl+Q3m_qVBxdwXBHgCuQTKvbhFiRUcaoU_9", "qjo,/,LUl,+,Q3m_qVBxdwXBHgCuQTKvbhFiRUcaoU_9,<EOF>", 184))
        self.assertTrue(TestLexer.test("if(6 % 6 == 1) int1 : integer ; else bool1: boolean ;", "if,(,6,%,6,==,1,),int1,:,integer,;,else,bool1,:,boolean,;,<EOF>", 185))
        self.assertTrue(TestLexer.test("if(6 % 6 == 1) int1 : integer = 1222_334sxx ; else bool1: boolean = true || false ;", "if,(,6,%,6,==,1,),int1,:,integer,=,1222334,sxx,;,else,bool1,:,boolean,=,true,||,false,;,<EOF>", 186))
        self.assertTrue(TestLexer.test("""if(6 % 6 == 1) int1 : integer = "\\t\\b\\x" ; else bool1: boolean = true || false ;""", """if,(,6,%,6,==,1,),int1,:,integer,=,Illegal Escape In String: \\t\\b\\x""", 187))
        self.assertTrue(TestLexer.test("{c}Y4enROD!h-V{9p>kXS6Ib>05", "{,c,},Y4enROD,!,h,-,V,{,9,p,>,kXS6Ib,>,0,5,<EOF>", 188))
        self.assertTrue(TestLexer.test(""" "String \n with escape"  """, """Unclosed String: String \n""", 189))
        self.assertTrue(TestLexer.test("9E.zz", """9,E,.,zz,<EOF>""", 190))
        self.assertTrue(TestLexer.test("1122_333_.33e-2300045", "1122333,_,.,33e-2300045,<EOF>", 191))
        self.assertTrue(TestLexer.test("1122_333.3_3e-2300_045", "1122333.3,_3e,-,2300045,<EOF>", 192))
        self.assertTrue(TestLexer.test("""{\t1,2}""", "{,1,,,2,},<EOF>", 193))
        self.assertTrue(TestLexer.test("-ZkT)Tg*)y)*.eU3(vjry>m)j", "-,ZkT,),Tg,*,),y,),*,.,eU3,(,vjry,>,m,),j,<EOF>", 194))
        self.assertTrue(TestLexer.test("22233__4444_.33_334e-3334", """222334444,_,.,33334e-3334,<EOF>""", 195))
        self.assertTrue(TestLexer.test("9____33__3_", """9333,_,<EOF>""", 196))
        self.assertTrue(TestLexer.test("09____333.44", """0,9333.44,<EOF>""", 197))
        self.assertTrue(TestLexer.test("0____333.44", """0,____333,.,44,<EOF>""", 198))
        self.assertTrue(TestLexer.test("-4.77san", "-,4.77,san,<EOF>", 199))
        self.assertTrue(TestLexer.test("1_234.567", "1234.567,<EOF>", 200))